# it is one-liner ansible command that performs one task on the target host/group

# it will only have two parameters, the group of a host that you want to perform the task and the Ansible module to run

# module: small programs that do some work on the server

# modules are the main building blocks of Ansible and are basically reusable scripts that are used by Ansible Ad-hoc and playbooks

# Ansible comes with a number of reusable modules.

# able to perform tasks without creating a playbook; rebooting servers, managing services, copy a file to only one host, install only one package

# modules will be pushed to client nodes and run and after running they will be removew

# basically, module is a python script 



ansible dev -m shell -a "uptime"

ansible dev -m shell -a "free -m"

ansible -i inventory dev -m shell -a "uptime"

ansible-doc -l | grep shell 


/etc/ansible/ansible.cfg    >   forks : how many nodes at a time ansible executes the commands/playbooks 

forks  = 1              vs      forks = 5

ansible all -m shell -a "sleep 5; echo 'hello world'"


# copy module
ansible dev -m copy -a "src=./inventory dest=/tmp/inventoryfromansibleengine"
ansible dev -m copy -a "content='hello from ansible engine' dest=/tmp/hello.txt"
ansible dev -m copy -a "content='another info from ansible engine' dest=/tmp/hello.txt backup=yes"

# download module 
ansible dev -m fetch -a "src=/home/userpath/hello.txt dest=./sunday/"
ansible dev -m fetch -a "src=/home/userpath/hello2.txt dest=./sunday/{{inventory_hostname}}_hello.txt flat=yes"

# create and delete file/directory 
ansible dev -m file -a "path=/tmp/sunday.txt state=touch mode='0777'"
ansible dev -m file -a "path=/tmp/sunday.txt state=absent"
ansible dev -m file -a "path=/tmp/sunday state=directory"
ansible dev -m file -a "path=/etc/sunday.txt state=touch" -b 

# install packages with yum 
ansible dev -m yum -a "name=git state=present"      # state=present/absent/latest
ansible dev -m yum -a "name=* state=latest" -b      

# command module 
ansible dev -m shell -a "uptime"
andible dev -m command -a "uptime"    or    ansible dev -a "uptime"
  # command module is executed without using shell, therefore, env variables like $HOME won't be available and < , >, | , & won't work
ansible dev -m command -a "ls > listOfFiles.txt"        vs      ansible dev -m shell -a "ls > listOfFiles.txt"


# reboot hosts
ansible all -a "reboot" -b

# create group and user 
ansible dev -m group -a "name=web state=present" -b
ansible dev -m user -a "name=web group=web createhome=yes" -b

# change file ownership
ansible dev -m file -a "path=/tmp/sunday.txt group=web owner=web" -b

# start/stop/enable service 
ansible dev -m yum -a "name=httpd state=present" -b
ansible dev -m service -a "name=httpd state=started enabled=yes" -b



